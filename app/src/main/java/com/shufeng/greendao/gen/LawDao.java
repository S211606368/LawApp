package com.shufeng.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.law.pojo.Law;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAW".
*/
public class LawDao extends AbstractDao<Law, Long> {

    public static final String TABLENAME = "LAW";

    /**
     * Properties of entity Law.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LawId = new Property(0, long.class, "lawId", true, "_id");
        public final static Property CodeId = new Property(1, long.class, "codeId", false, "CODE_ID");
        public final static Property LawName = new Property(2, String.class, "lawName", false, "LAW_NAME");
        public final static Property PublicDate = new Property(3, String.class, "publicDate", false, "PUBLIC_DATE");
        public final static Property ImplementDate = new Property(4, String.class, "implementDate", false, "IMPLEMENT_DATE");
        public final static Property LawContent = new Property(5, String.class, "lawContent", false, "LAW_CONTENT");
    }


    public LawDao(DaoConfig config) {
        super(config);
    }
    
    public LawDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: lawId
                "\"CODE_ID\" INTEGER NOT NULL ," + // 1: codeId
                "\"LAW_NAME\" TEXT NOT NULL ," + // 2: lawName
                "\"PUBLIC_DATE\" TEXT," + // 3: publicDate
                "\"IMPLEMENT_DATE\" TEXT," + // 4: implementDate
                "\"LAW_CONTENT\" TEXT);"); // 5: lawContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Law entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLawId());
        stmt.bindLong(2, entity.getCodeId());
        stmt.bindString(3, entity.getLawName());
 
        String publicDate = entity.getPublicDate();
        if (publicDate != null) {
            stmt.bindString(4, publicDate);
        }
 
        String implementDate = entity.getImplementDate();
        if (implementDate != null) {
            stmt.bindString(5, implementDate);
        }
 
        String lawContent = entity.getLawContent();
        if (lawContent != null) {
            stmt.bindString(6, lawContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Law entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLawId());
        stmt.bindLong(2, entity.getCodeId());
        stmt.bindString(3, entity.getLawName());
 
        String publicDate = entity.getPublicDate();
        if (publicDate != null) {
            stmt.bindString(4, publicDate);
        }
 
        String implementDate = entity.getImplementDate();
        if (implementDate != null) {
            stmt.bindString(5, implementDate);
        }
 
        String lawContent = entity.getLawContent();
        if (lawContent != null) {
            stmt.bindString(6, lawContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Law readEntity(Cursor cursor, int offset) {
        Law entity = new Law( //
            cursor.getLong(offset + 0), // lawId
            cursor.getLong(offset + 1), // codeId
            cursor.getString(offset + 2), // lawName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // publicDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // implementDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // lawContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Law entity, int offset) {
        entity.setLawId(cursor.getLong(offset + 0));
        entity.setCodeId(cursor.getLong(offset + 1));
        entity.setLawName(cursor.getString(offset + 2));
        entity.setPublicDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImplementDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLawContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Law entity, long rowId) {
        entity.setLawId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Law entity) {
        if(entity != null) {
            return entity.getLawId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Law entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
